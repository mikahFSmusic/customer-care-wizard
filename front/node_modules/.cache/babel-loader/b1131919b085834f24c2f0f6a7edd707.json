{"ast":null,"code":"import { createContext, useState, useMemo, createElement, useContext, useCallback } from 'react';\nconst STORE_DEFAULT_NAME = '__STATE_MACHINE__';\nconst STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';\nconst STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';\n\nvar getBrowserStoreData = (storageType, storeName) => {\n  const sessionStorageData = storageType.getItem(storeName);\n\n  try {\n    return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;\n  } catch (_a) {\n    return undefined;\n  }\n};\n\nfunction storeFactory(storageType, name) {\n  const storeName = name || STORE_DEFAULT_NAME;\n  let store = getBrowserStoreData(storageType, storeName);\n\n  const getName = () => storeName;\n\n  const set = value => {\n    store = value;\n  };\n\n  const get = () => store;\n\n  return {\n    set,\n    get,\n    getName\n  };\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isSessionStorageAllowed = () => {\n  try {\n    return !!window.sessionStorage;\n  } catch (e) {\n    return false;\n  }\n};\n\nfunction setUpDevTools(isDevMode, storageType, getName, getStore) {\n  if (typeof window === 'undefined' || !isDevMode) return; // @ts-ignore\n\n  window.STATE_MACHINE_DEBUG = value => storageType.setItem(STATE_MACHINE_DEBUG_NAME, value); // @ts-ignore\n\n\n  window.STATE_MACHINE_RESET = () => storageType.clear(); // @ts-ignore\n\n\n  window.STATE_MACHINE_GET_STORE = () => storageType.getItem(getName()); // @ts-ignore\n\n\n  window.STATE_MACHINE_SAVE_TO = name => window.localStorage.setItem(name, JSON.stringify(getStore())); // @ts-ignore\n\n\n  window.STATE_MACHINE_LOAD = ({\n    storeName,\n    data\n  }) => storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');\n}\n\nvar StateMachineContext = createContext({\n  store: {},\n  updateStore: payload => payload\n});\n\nvar transformStore = ({\n  transform,\n  externalStoreName,\n  storageType,\n  store\n}) => transform({\n  externalStoreData: getBrowserStoreData(storageType, externalStoreName),\n  currentStoreData: store\n});\n\nfunction getSyncStoreData(defaultStoreData, options, storageType) {\n  let store = defaultStoreData;\n  const syncStoreOption = options.syncStores;\n  if (!syncStoreOption) return store;\n\n  try {\n    if (Array.isArray(syncStoreOption)) {\n      syncStoreOption.forEach(option => {\n        store = transformStore({\n          transform: option.transform,\n          externalStoreName: option.externalStoreName,\n          storageType,\n          store\n        });\n      });\n    } else if (syncStoreOption.externalStoreName && typeof syncStoreOption.transform === 'function' && typeof syncStoreOption.externalStoreName === 'string') {\n      return transformStore({\n        transform: syncStoreOption.transform,\n        externalStoreName: syncStoreOption.externalStoreName,\n        storageType,\n        store\n      });\n    } else {\n      Object.entries(syncStoreOption).forEach(([key, values]) => {\n        const browserStore = getBrowserStoreData(storageType, key);\n        values.forEach(value => {\n          store = Object.assign(Object.assign({}, store), {\n            [value]: Object.assign(Object.assign({}, store[value]), browserStore[value])\n          });\n        });\n      });\n    }\n  } catch (_a) {\n    return store;\n  }\n\n  return store;\n}\n\nconst isClient = typeof window !== 'undefined';\nconst isDevMode = process.env.NODE_ENV !== 'production';\nlet storageType = isClient && isSessionStorageAllowed() ? window.sessionStorage : {\n  getItem: payload => payload,\n  setItem: payload => payload,\n  clear: () => {},\n  length: 0,\n  key: payload => payload.toString(),\n  removeItem: () => {}\n};\nlet getStore;\nlet setStore;\nlet getName;\nlet middleWaresArray = [];\n\nconst middleWare = (data = '') => {\n  if (data && isClient) {\n    // @ts-ignore\n    window[STORE_ACTION_NAME] = data;\n  }\n\n  return data;\n};\n\nfunction setStorageType(type) {\n  storageType = type;\n}\n\nfunction createStore(defaultStoreData, options = {\n  name: STORE_DEFAULT_NAME,\n  middleWares: [],\n  syncStores: undefined\n}) {\n  const storeName = options ? options.name : STORE_DEFAULT_NAME;\n  const methods = storeFactory(storageType, storeName);\n\n  if (isDevMode && isClient) {\n    // @ts-ignore\n    window['STATE_MACHINE_NAME'] = storeName;\n  }\n\n  getName = methods.getName;\n  getStore = methods.get;\n  setStore = methods.set;\n  middleWaresArray = options.middleWares;\n  setUpDevTools(isDevMode, storageType, getName, getStore);\n  setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));\n}\n\nfunction StateMachineProvider(props) {\n  const [globalState, updateStore] = useState(getStore());\n  const value = useMemo(() => ({\n    store: globalState,\n    updateStore\n  }), [globalState]); // @ts-ignore\n\n  return createElement(StateMachineContext.Provider, Object.assign({\n    value: value\n  }, props));\n}\n\nconst actionTemplate = ({\n  options,\n  callback,\n  updateStore\n}) => payload => {\n  let result;\n  const debugName = callback ? callback.name : '';\n\n  if (isDevMode) {\n    middleWare(debugName);\n  }\n\n  if (callback) {\n    result = callback(getStore(), payload);\n  }\n\n  setStore(isUndefined(result) ? getStore() : result);\n  storageType.setItem(getName(), JSON.stringify(getStore()));\n\n  if (isUndefined(options) || options && options.shouldReRenderApp !== false) {\n    let pipeData = getStore();\n\n    if (Array.isArray(middleWaresArray) && middleWaresArray.length) {\n      pipeData = middleWaresArray.reduce((currentValue, currentFunction) => currentFunction(currentValue) || currentValue, pipeData);\n    }\n\n    updateStore(pipeData);\n  }\n};\n\nfunction useStateMachine(updateStoreFunction, options) {\n  const {\n    store: globalState,\n    updateStore\n  } = useContext(StateMachineContext);\n\n  if (updateStoreFunction && Object.keys(updateStoreFunction).length) {\n    return {\n      actions: Object.entries(updateStoreFunction).reduce((previous, [key, callback]) => Object.assign(Object.assign({}, previous), {\n        [key]: useCallback(actionTemplate({\n          options,\n          callback,\n          updateStore\n        }), [])\n      }), {}),\n      action: p => p,\n      state: globalState\n    };\n  }\n\n  return {\n    actions: {},\n    action: useCallback(updateStoreFunction ? actionTemplate({\n      options,\n      callback: updateStoreFunction,\n      updateStore\n    }) : () => {}, []),\n    state: globalState\n  };\n}\n\nexport { StateMachineContext, StateMachineProvider, createStore, setStorageType, useStateMachine };","map":{"version":3,"sources":["/Users/mfs/Desktop/e m p l o y m e n t/Maisonette/Projects/damage-defect-wizard/node_modules/little-state-machine/dist/little-state-machine.es.js"],"names":["createContext","useState","useMemo","createElement","useContext","useCallback","STORE_DEFAULT_NAME","STORE_ACTION_NAME","STATE_MACHINE_DEBUG_NAME","getBrowserStoreData","storageType","storeName","sessionStorageData","getItem","JSON","parse","undefined","_a","storeFactory","name","store","getName","set","value","get","isUndefined","val","isSessionStorageAllowed","window","sessionStorage","e","setUpDevTools","isDevMode","getStore","STATE_MACHINE_DEBUG","setItem","STATE_MACHINE_RESET","clear","STATE_MACHINE_GET_STORE","STATE_MACHINE_SAVE_TO","localStorage","stringify","STATE_MACHINE_LOAD","data","StateMachineContext","updateStore","payload","transformStore","transform","externalStoreName","externalStoreData","currentStoreData","getSyncStoreData","defaultStoreData","options","syncStoreOption","syncStores","Array","isArray","forEach","option","Object","entries","key","values","browserStore","assign","isClient","process","env","NODE_ENV","length","toString","removeItem","setStore","middleWaresArray","middleWare","setStorageType","type","createStore","middleWares","methods","StateMachineProvider","props","globalState","Provider","actionTemplate","callback","result","debugName","shouldReRenderApp","pipeData","reduce","currentValue","currentFunction","useStateMachine","updateStoreFunction","keys","actions","previous","action","p","state"],"mappings":"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","sourcesContent":["import { createContext, useState, useMemo, createElement, useContext, useCallback } from 'react';\n\nconst STORE_DEFAULT_NAME = '__STATE_MACHINE__';\r\nconst STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';\r\nconst STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';\n\nvar getBrowserStoreData = (storageType, storeName) => {\r\n    const sessionStorageData = storageType.getItem(storeName);\r\n    try {\r\n        return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;\r\n    }\r\n    catch (_a) {\r\n        return undefined;\r\n    }\r\n};\n\nfunction storeFactory(storageType, name) {\r\n    const storeName = name || STORE_DEFAULT_NAME;\r\n    let store = getBrowserStoreData(storageType, storeName);\r\n    const getName = () => storeName;\r\n    const set = (value) => {\r\n        store = value;\r\n    };\r\n    const get = () => store;\r\n    return {\r\n        set,\r\n        get,\r\n        getName,\r\n    };\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isSessionStorageAllowed = () => {\r\n    try {\r\n        return !!window.sessionStorage;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\n\nfunction setUpDevTools(isDevMode, storageType, getName, getStore) {\r\n    if (typeof window === 'undefined' || !isDevMode)\r\n        return;\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_DEBUG = (value) => storageType.setItem(STATE_MACHINE_DEBUG_NAME, value);\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_RESET = () => storageType.clear();\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_GET_STORE = () => storageType.getItem(getName());\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_SAVE_TO = name => window.localStorage.setItem(name, JSON.stringify(getStore()));\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_LOAD = ({ storeName, data, }) => storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');\r\n}\n\nvar StateMachineContext = createContext({\r\n    store: {},\r\n    updateStore: (payload) => payload,\r\n});\n\nvar transformStore = ({ transform, externalStoreName, storageType, store, }) => transform({\r\n    externalStoreData: getBrowserStoreData(storageType, externalStoreName),\r\n    currentStoreData: store,\r\n});\n\nfunction getSyncStoreData(defaultStoreData, options, storageType) {\r\n    let store = defaultStoreData;\r\n    const syncStoreOption = options.syncStores;\r\n    if (!syncStoreOption)\r\n        return store;\r\n    try {\r\n        if (Array.isArray(syncStoreOption)) {\r\n            syncStoreOption.forEach(option => {\r\n                store = transformStore({\r\n                    transform: option.transform,\r\n                    externalStoreName: option.externalStoreName,\r\n                    storageType,\r\n                    store,\r\n                });\r\n            });\r\n        }\r\n        else if (syncStoreOption.externalStoreName &&\r\n            typeof syncStoreOption.transform === 'function' &&\r\n            typeof syncStoreOption.externalStoreName === 'string') {\r\n            return transformStore({\r\n                transform: syncStoreOption.transform,\r\n                externalStoreName: syncStoreOption.externalStoreName,\r\n                storageType,\r\n                store,\r\n            });\r\n        }\r\n        else {\r\n            Object.entries(syncStoreOption).forEach(([key, values]) => {\r\n                const browserStore = getBrowserStoreData(storageType, key);\r\n                values.forEach((value) => {\r\n                    store = Object.assign(Object.assign({}, store), {\r\n                        [value]: Object.assign(Object.assign({}, store[value]), browserStore[value]),\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    catch (_a) {\r\n        return store;\r\n    }\r\n    return store;\r\n}\n\nconst isClient = typeof window !== 'undefined';\r\nconst isDevMode = process.env.NODE_ENV !== 'production';\r\nlet storageType = isClient && isSessionStorageAllowed()\r\n    ? window.sessionStorage\r\n    : {\r\n        getItem: payload => payload,\r\n        setItem: (payload) => payload,\r\n        clear: () => { },\r\n        length: 0,\r\n        key: (payload) => payload.toString(),\r\n        removeItem: () => { },\r\n    };\r\nlet getStore;\r\nlet setStore;\r\nlet getName;\r\nlet middleWaresArray = [];\r\nconst middleWare = (data = '') => {\r\n    if (data && isClient) {\r\n        // @ts-ignore\r\n        window[STORE_ACTION_NAME] = data;\r\n    }\r\n    return data;\r\n};\r\nfunction setStorageType(type) {\r\n    storageType = type;\r\n}\r\nfunction createStore(defaultStoreData, options = {\r\n    name: STORE_DEFAULT_NAME,\r\n    middleWares: [],\r\n    syncStores: undefined,\r\n}) {\r\n    const storeName = options ? options.name : STORE_DEFAULT_NAME;\r\n    const methods = storeFactory(storageType, storeName);\r\n    if (isDevMode && isClient) {\r\n        // @ts-ignore\r\n        window['STATE_MACHINE_NAME'] = storeName;\r\n    }\r\n    getName = methods.getName;\r\n    getStore = methods.get;\r\n    setStore = methods.set;\r\n    middleWaresArray = options.middleWares;\r\n    setUpDevTools(isDevMode, storageType, getName, getStore);\r\n    setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));\r\n}\r\nfunction StateMachineProvider(props) {\r\n    const [globalState, updateStore] = useState(getStore());\r\n    const value = useMemo(() => ({\r\n        store: globalState,\r\n        updateStore,\r\n    }), [globalState]);\r\n    // @ts-ignore\r\n    return createElement(StateMachineContext.Provider, Object.assign({ value: value }, props));\r\n}\r\nconst actionTemplate = ({ options, callback, updateStore, }) => (payload) => {\r\n    let result;\r\n    const debugName = callback ? callback.name : '';\r\n    if (isDevMode) {\r\n        middleWare(debugName);\r\n    }\r\n    if (callback) {\r\n        result = callback(getStore(), payload);\r\n    }\r\n    setStore(isUndefined(result) ? getStore() : result);\r\n    storageType.setItem(getName(), JSON.stringify(getStore()));\r\n    if (isUndefined(options) ||\r\n        (options && options.shouldReRenderApp !== false)) {\r\n        let pipeData = getStore();\r\n        if (Array.isArray(middleWaresArray) && middleWaresArray.length) {\r\n            pipeData = middleWaresArray.reduce((currentValue, currentFunction) => currentFunction(currentValue) || currentValue, pipeData);\r\n        }\r\n        updateStore(pipeData);\r\n    }\r\n};\r\nfunction useStateMachine(updateStoreFunction, options) {\r\n    const { store: globalState, updateStore } = useContext(StateMachineContext);\r\n    if (updateStoreFunction && Object.keys(updateStoreFunction).length) {\r\n        return {\r\n            actions: Object.entries(updateStoreFunction).reduce((previous, [key, callback]) => (Object.assign(Object.assign({}, previous), { [key]: useCallback(actionTemplate({\r\n                    options,\r\n                    callback,\r\n                    updateStore,\r\n                }), []) })), {}),\r\n            action: p => p,\r\n            state: globalState,\r\n        };\r\n    }\r\n    return {\r\n        actions: {},\r\n        action: useCallback(updateStoreFunction\r\n            ? actionTemplate({\r\n                options,\r\n                callback: updateStoreFunction,\r\n                updateStore,\r\n            })\r\n            : () => { }, []),\r\n        state: globalState,\r\n    };\r\n}\n\nexport { StateMachineContext, StateMachineProvider, createStore, setStorageType, useStateMachine };\n"]},"metadata":{},"sourceType":"module"}