{"ast":null,"code":"var _jsxFileName = \"/Users/mfs/Desktop/e m p l o y m e n t/Maisonette/Projects/damage-defect-wizard/src/components/DamageDefectForm/CustomerInfo.tsx\";\nimport React, { useState } from 'react';\nimport { MDBCol, MDBFormInline, MDBIcon } from 'mdbreact'; // require(\"dotenv/config\" )\n\nconst kustomerAPIKey = process.env.REACT_APP_KUSTOMER_API_KEY;\nconst xhr = new XMLHttpRequest();\nxhr.responseType = 'json'; // const getCustomers = (\n//   value: string\n//   ) => {\n//   let proxyUrl: string = \"https://cors-anywhere.herokuapp.com/\"\n//   let requestUrl: string = \"https://api.kustomerapp.com/v1/customers/search\"\n//   let data = JSON.stringify({\n//     \"and\": [],\n//     \"or\": [\n//       {\n//         \"customer_name\": {\n//           \"equals\": `${value}`\n//         }\n//       }\n//     ],\n//     \"sort\": [\n//       {\n//         \"updatedAt\": {\n//           \"order\": \"asc\"\n//         }\n//       }\n//     ],\n//     \"queryContext\": \"customer\"\n//   })\n//   let resData = {}\n//   try {\n//     xhr.open(\"POST\", proxyUrl + requestUrl, true);\n//     xhr.setRequestHeader(\"authorization\", `Bearer ${kustomerAPIKey}`);\n//     xhr.setRequestHeader(\"content-type\", \"application/json\");\n//     xhr.send(data);\n//     xhr.onload = () => {\n//       if (xhr.readyState === XMLHttpRequest.DONE) {\n//         let status = xhr.status\n//         if (status === 0 || (status >= 200 && status < 400) ) {\n//           let response = xhr.responseText\n//           resData = JSON.parse(response)\n//           return resData\n//         }\n//       }\n//     }\n//   } catch (error) {\n//     throw new Error(error)\n//   }\n// };\n\nconst getCustomers = async value => {\n  let proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n  let requestUrl = \"https://api.kustomerapp.com/v1/customers/search\";\n  let data = JSON.stringify({\n    \"and\": [],\n    \"or\": [{\n      \"customer_name\": {\n        \"equals\": `${value}`\n      }\n    }],\n    \"sort\": [{\n      \"updatedAt\": {\n        \"order\": \"asc\"\n      }\n    }],\n    \"queryContext\": \"customer\"\n  });\n\n  try {\n    const response = await fetch(proxyUrl + requestUrl, {\n      cache: \"no-cache\",\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'authorization': `Bearer ${kustomerAPIKey}`\n      }\n    });\n\n    if (response.ok) {\n      const jsonResponse = await response.json;\n      console.log(jsonResponse);\n    }\n  } catch (error) {\n    console.log(error);\n  } // fetch(proxyUrl + requestUrl, {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-type': 'application/json',\n  //     'authorization': `Bearer ${kustomerAPIKey}`\n  //   },\n  //   body: data\n  // }).then(response => {\n  //   if (response.ok) {\n  //     return response.json();\n  //   }\n  //   throw new Error('request failed.')\n  // }, networkError => {\n  //   console.log(networkError.message)\n  // })\n\n};\n\nexport const CustomerInfo = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const customerInfoStyle = {\n    borderRight: \"2px solid gray\",\n    margin: \"10px\",\n    height: \"95%\"\n  };\n\n  const handleSearchChange = event => {\n    const el = event.target;\n    const value = el.value;\n    setSearchValue(value);\n    let results = getCustomers(value);\n    console.log(results);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: customerInfoStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MDBCol, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"Customer Info\"), /*#__PURE__*/React.createElement(MDBFormInline, {\n    className: \"md-form\",\n    style: {\n      display: \"flex\",\n      alignContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MDBIcon, {\n    icon: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: searchValue,\n    className: \"form-control form-control-lg ml-3 w-75\",\n    type: \"text\",\n    placeholder: \"Search\",\n    \"aria-label\": \"Search\",\n    onChange: handleSearchChange,\n    onSubmit: handleSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"Search Result Display\"));\n};","map":{"version":3,"sources":["/Users/mfs/Desktop/e m p l o y m e n t/Maisonette/Projects/damage-defect-wizard/src/components/DamageDefectForm/CustomerInfo.tsx"],"names":["React","useState","MDBCol","MDBFormInline","MDBIcon","kustomerAPIKey","process","env","REACT_APP_KUSTOMER_API_KEY","xhr","XMLHttpRequest","responseType","getCustomers","value","proxyUrl","requestUrl","data","JSON","stringify","response","fetch","cache","method","headers","ok","jsonResponse","json","console","log","error","CustomerInfo","searchValue","setSearchValue","customerInfoStyle","borderRight","margin","height","handleSearchChange","event","el","target","results","display","alignContent"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useState } from 'react'\nimport { MDBCol, MDBFormInline, MDBIcon } from 'mdbreact'\n// require(\"dotenv/config\" )\nconst kustomerAPIKey = process.env.REACT_APP_KUSTOMER_API_KEY\n\nconst xhr = new XMLHttpRequest();\nxhr.responseType = 'json';\n\n\n// const getCustomers = (\n//   value: string\n//   ) => {\n//   let proxyUrl: string = \"https://cors-anywhere.herokuapp.com/\"\n//   let requestUrl: string = \"https://api.kustomerapp.com/v1/customers/search\"\n\n//   let data = JSON.stringify({\n//     \"and\": [],\n//     \"or\": [\n//       {\n//         \"customer_name\": {\n//           \"equals\": `${value}`\n//         }\n//       }\n//     ],\n//     \"sort\": [\n//       {\n//         \"updatedAt\": {\n//           \"order\": \"asc\"\n//         }\n//       }\n//     ],\n//     \"queryContext\": \"customer\"\n//   })\n//   let resData = {}\n//   try {\n//     xhr.open(\"POST\", proxyUrl + requestUrl, true);\n//     xhr.setRequestHeader(\"authorization\", `Bearer ${kustomerAPIKey}`);\n//     xhr.setRequestHeader(\"content-type\", \"application/json\");\n//     xhr.send(data);\n//     xhr.onload = () => {\n//       if (xhr.readyState === XMLHttpRequest.DONE) {\n//         let status = xhr.status\n//         if (status === 0 || (status >= 200 && status < 400) ) {\n//           let response = xhr.responseText\n//           resData = JSON.parse(response)\n//           return resData\n//         }\n//       }\n//     }\n//   } catch (error) {\n//     throw new Error(error)\n//   }\n// };\n\nconst getCustomers = async (\n  value: string\n) => {\n  let proxyUrl: string = \"https://cors-anywhere.herokuapp.com/\"\n  let requestUrl: string = \"https://api.kustomerapp.com/v1/customers/search\"\n  let data = JSON.stringify({\n    \"and\": [],\n    \"or\": [\n      {\n        \"customer_name\": {\n          \"equals\": `${value}`\n        }\n      }\n    ],\n    \"sort\": [\n      {\n        \"updatedAt\": {\n          \"order\": \"asc\"\n        }\n      }\n    ],\n    \"queryContext\": \"customer\"\n  })\n  try {\n    const response = await fetch(proxyUrl + requestUrl, {\n      cache: \"no-cache\",\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'authorization': `Bearer ${kustomerAPIKey}`\n      }\n    })\n    if (response.ok) {\n      const jsonResponse = await response.json\n      console.log(jsonResponse)\n    }\n  } catch (error) {\n    console.log(error)\n  }\n\n  // fetch(proxyUrl + requestUrl, {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-type': 'application/json',\n  //     'authorization': `Bearer ${kustomerAPIKey}`\n  //   },\n  //   body: data\n  // }).then(response => {\n  //   if (response.ok) {\n  //     return response.json();\n  //   }\n  //   throw new Error('request failed.')\n  // }, networkError => {\n  //   console.log(networkError.message)\n  // })\n}\n\nexport const CustomerInfo = () => {\n  const [searchValue, setSearchValue] = useState<string>('')\n\n\n\n  const customerInfoStyle = {\n    borderRight: \"2px solid gray\",\n    margin: \"10px\",\n    height: \"95%\",\n  }\n\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const el = event.target as HTMLInputElement\n    const value = el.value\n    setSearchValue(value)\n    let results = getCustomers(value)\n    console.log(results)\n  }\n\n  return (\n    <div style={customerInfoStyle}>\n      <MDBCol md=\"12\">\n        <h2>Customer Info</h2>\n        <MDBFormInline className=\"md-form\" style={{ display: \"flex\", alignContent: \"center\"}}>\n          <MDBIcon icon=\"search\"></MDBIcon>\n          <input value={searchValue} className=\"form-control form-control-lg ml-3 w-75\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" onChange={handleSearchChange} onSubmit={handleSearchChange}></input>\n        </MDBFormInline>\n      </MDBCol>\n\n      <div>\n        Search Result Display\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}